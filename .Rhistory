install.packages("roxygen2")
roxygen2::roxygenise()
roxygen2::roxygenise()
library(roxygen2)
?runapp
?runApp
library(shiny)
?runApp
roxygenise()
warnings()
library(shiny.exe)
?taskscheduler_create
library(taskscheduleR)
?taskscheduler_create
library(shiny)
?runApp
shell (‘R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview’)
shell ("R CMD Rd2pdf . --output=man/figures/manual.pdf --force --no-preview")
install.packages("devtools")
devtools::check()
install.packages("styler")
styler:::style_selection()
?library
?require
file.info("R/create_task_shortcut.R")
?requireNamespace
requireNamespace("taskscheduleR")
iconv(“create_task_shortcut.R”, from = “latin1”, to = “UTF-8”)
iconv("create_task_shortcut.R", from = "latin1", to = "UTF-8"")
)
}}
<
>
)
)
]
requireNamespace(“shiny”, quietly = TRUE)
requireNamespace("shiny", quietly = TRUE)
require(shiny)
library(shiny.exe)
styler:::style_selection()
library(shiny.exe)
usethis::use_vignette("Introduction to shiny.exe")
usethis::use_vignette(title = "Introduction to shiny.exe")
rlang::last_trace()
devtools::build_vignettes()
devtools::build_vignettes(pkg = "shiny.exe")
install.packages("rhub")
rhub::check_for_cran()
rhub::check_on_windows()
usethis::use_cran_comments()
rhub::check_on_windows()
rhub::check_on_windows()
rhub::check_on_windows()
devtools::submit_cran()
usethis::use_vignette("shiny.exe")
usethis::use_vignette("Run shiny app on click")
usethis::use_vignette("shiny_exe")
library(devtools)
?check
library(shiny.exe)
library(shiny.exe)
remove.packages("shiny.exe")
library(shiny.exe)
library(shiny.exe)
library(shiny.exe)
library(shiny.exe)
create_task_shortcut <- function(task_name, shortcut_name,appDir){
# Get Os type
sysname <- Sys.info()["sysname"]
if (sysname == "Windows") {
# Check parameters
if (!is.character(task_name) || length(task_name) != 1) {
stop("The 'task_name' argument must be a character string of length 1")
}
if (!is.character(shortcut_name) || length(shortcut_name) != 1) {
stop("The 'shortcut_name' argument must be a character string of length 1")
}
# Specify the path to the shiny app
desktop_path <- appDir
# Check if the desktop path is valid
if (!dir.exists(desktop_path)) {
stop("Desktop path does not exist:", desktop_path)
}
# Specify shortcut details
target_path <- "C:\\Windows\\System32\\schtasks.exe"
arguments <- paste0("/run /tn \"", task_name, "\"")
icon_path <- target_path
# Check if the target file exists
if (!file.exists(target_path)) {
stop("Target file does not exist:", target_path)
}
# Create shortcut
shell(
paste0(
"powershell \"$ws = New-Object -ComObject WScript.Shell; $s = $ws.CreateShortcut('",
file.path(desktop_path, paste0(shortcut_name, ".lnk")),
"'); $s.TargetPath = '",
target_path,
"\'; $s.Arguments = '",
arguments,
"'; $s.IconLocation = '",
icon_path,
"'; $s.Save()\"",
sep = ""
),
intern = TRUE
)
}
else if (sysname == "Darwin") {
# Créer le contenu du fichier .command
contenu <- paste0("#!/bin/bash\nRscript ", paste0(appDir,task_name,".R"))
# Enregistrer le fichier .command
writeLines(contenu, paste0(task_name, ".command"))
# Rendre le fichier exécutable
system(paste0("chmod +x ", task_name, ".command"))
# Afficher un message de confirmation
message(paste0("File '", task_name, ".command' was created !"))
}
else if (sysname == "Linux") {
# shell file contents
contenu <- paste0("#!/bin/bash\nRscript ", chemin_script)
writeLines(contenu, paste0(nom_commande, ".sh"))
# Make it executable
system(paste0("chmod +x ", nom_commande, ".sh"))
# Confrimation message
message(paste0("File '", nom_commande, ".sh' was created !"))}
}
#' @param appName the name of you shortcut or application
#' @param port see `port` parameter in `shiny::runApp()`
#' @param host see `host` parameter in `shiny::runApp()`. If `host = 'public'`, the application will be launched on the public server to which you are connected. Thus, all other devices connected to the same server will be able to access the application through the link of your IPv4 extended by the port. You can stop the application by leaving the terminal opened by the shortcut.
#' @param appDir see `host` parameter in `shiny::runApp()`
#'
#' @return character(0)
#' @export
#'
#' @examples
#' \dontrun{shiny.exe(appName = "MyApp", host = 'public')}
shiny.exe <- function(
appName,
port = getOption("shiny.port"),
host = getOption("shiny.host", "127.0.0.1"),
appDir = getwd()){
if(is.null(port)) port = "getOption('shiny.port')"
# Choose host function depending the OS type
host_func <- ifelse(Sys.info()["sysname"] == "Windows", "hostWin", "hostUnix")
texte = c("#' Please do not rename this file !",
"library(shiny.exe)",
paste0(host_func,"(
appDir = '", appDir,"',
port = ",port,",
launch.browser = TRUE,
host = ","'",host,"'",",
workerId = '',
quiet = FALSE,
display.mode = c('auto', 'normal', 'showcase'),
test.mode = getOption('shiny.testmode', FALSE))"))
writeLines(
texte,
paste0(appName,".R")
)
create_task_shortcut(appName,appName,appDir)
}
library(shiny.exe)
install.packages("devtools")
?loadNamespace
loadedNamespaces(shiny.exe)
loadedNamespaces("shiny.exe")
requireNamespace("shiny.exe")
?:::
?`:::`
install.packages("rhub")
rhub::check_for_cran()
rhub::validate_email("abdouloudoussdiakite@gmail.com")
rhub::check_for_cran()
rhub::check_for_cran()
rhub::check_for_cran()
if(requireNamespace("shiny.exe"))
)
if(require("shiny.exe"))
)
requireNamespace("shiny", quietly = TRUE)
rhub::check_for_cran()
devtools::submit_cran()
devtools::submit_cran()
install.packages("BRVM")
